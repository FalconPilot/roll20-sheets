<% const skillStatus = {
  known: '2',
  trained: '+10',
  experienced: '+20',
  veteran: '+30'
} %>

<% const bonuses = Object.keys(skillStatus).reduce((acc, status) => ({
  ...acc,
  [status]: [grouped ? null : key, status].filter(x => x).join('_')
}), {}) %>

<% const equation = `/em Test (${grouped ? '@{name}' : skill.name}): [[1D100]], Target: [[@{${skill.stats[0]}_total} - 20 + (20 * @{${bonuses.known}}) + (10 * @{${bonuses.trained}}) + (10 * @{${bonuses.experienced}}) + (10 * @{${bonuses.veteran}})]]` %>
<div class="frow fw skill pg">
  <% if (!grouped) { %>
    <button type="roll" class="bordeaux pg fgrow" value="<%- equation %>">
      <%= skill.name %>
    </button>
  <% } else { %>
    <button
      type="roll"
      class="bordeaux pg compact fcol centerv centerh"
      value="<%- equation %>"
    >0</button>
    <%- include('../textInput.ejs', {
      constants,
      name: 'name',
      title: null,
      options: {
        classes: ['pgv']
      }
    }) %>
  <% } %>
  <% Object.entries(skillStatus).forEach(([status, label], idx) => { %>
    <%- include('../dualCheckbox.ejs', {
      constants,
      prefix: grouped ? null : key,
      leftKey: status,
      rightKey: `${status}_free`,
      leftTitle: label,
      rightTitle: 'Free',
      options: {
        classes: ['skillbox', 'nogrow', 'noshrink', 'pgl'].concat(idx === 0 ? ['first'] : [])
      }
    }) %>
  <% }) %>
</div>
